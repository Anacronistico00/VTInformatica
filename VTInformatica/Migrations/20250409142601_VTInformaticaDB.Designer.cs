// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VTInformatica.Data;

#nullable disable

namespace VTInformatica.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250409142601_VTInformaticaDB")]
    partial class VTInformaticaDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("VTInformatica.Models.Auth.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6e252143-4396-4863-9225-a8e6ec6cc0ed",
                            ConcurrencyStamp = "6e252143-4396-4863-9225-a8e6ec6cc0ed",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3d00012d-8a83-44a8-b82f-5b8b3c879631",
                            ConcurrencyStamp = "3d00012d-8a83-44a8-b82f-5b8b3c879631",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        },
                        new
                        {
                            Id = "cd1b25a4-687e-4ce5-b7d8-082ccd5fcfdd",
                            ConcurrencyStamp = "cd1b25a4-687e-4ce5-b7d8-082ccd5fcfdd",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("VTInformatica.Models.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("VTInformatica.Models.Auth.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("VTInformatica.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("VTInformatica.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("VTInformatica.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Componenti PC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Periferiche"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Accessori e Cavi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Networking"
                        },
                        new
                        {
                            Id = 6,
                            Name = "PC Assemblati"
                        });
                });

            modelBuilder.Entity("VTInformatica.Models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerId"));

                    b.Property<string>("ManufacturerLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturer");

                    b.HasData(
                        new
                        {
                            ManufacturerId = 1,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/6/6a/Intel_logo_(2006-2020).svg",
                            ManufacturerName = "Intel"
                        },
                        new
                        {
                            ManufacturerId = 2,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/7/7c/AMD_Logo.svg",
                            ManufacturerName = "AMD"
                        },
                        new
                        {
                            ManufacturerId = 3,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/2/21/Nvidia_logo.svg",
                            ManufacturerName = "NVIDIA"
                        },
                        new
                        {
                            ManufacturerId = 4,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/2/2f/AsusTek-black-logo.svg",
                            ManufacturerName = "ASUS"
                        },
                        new
                        {
                            ManufacturerId = 5,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/1/1b/Corsair.svg",
                            ManufacturerName = "Corsair"
                        },
                        new
                        {
                            ManufacturerId = 6,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/2/2e/Msi-Logo.svg",
                            ManufacturerName = "MSI"
                        },
                        new
                        {
                            ManufacturerId = 7,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/0/08/Gigabyte_Technology_logo.svg",
                            ManufacturerName = "Gigabyte"
                        },
                        new
                        {
                            ManufacturerId = 8,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/4/48/Dell_Logo.svg",
                            ManufacturerName = "Dell"
                        },
                        new
                        {
                            ManufacturerId = 9,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/3/3b/HP_logo_2012.svg",
                            ManufacturerName = "HP"
                        },
                        new
                        {
                            ManufacturerId = 10,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/0/0b/Lenovo_Global_Corporate_Logo.png",
                            ManufacturerName = "Lenovo"
                        },
                        new
                        {
                            ManufacturerId = 11,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg",
                            ManufacturerName = "Apple"
                        },
                        new
                        {
                            ManufacturerId = 12,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/2/24/Samsung_Logo.svg",
                            ManufacturerName = "Samsung"
                        },
                        new
                        {
                            ManufacturerId = 13,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/7/79/Seagate_logo.svg",
                            ManufacturerName = "Seagate"
                        },
                        new
                        {
                            ManufacturerId = 14,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/2/20/Western_Digital_logo.svg",
                            ManufacturerName = "Western Digital"
                        },
                        new
                        {
                            ManufacturerId = 15,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/4/4a/Kingston_Technology_logo.svg",
                            ManufacturerName = "Kingston"
                        },
                        new
                        {
                            ManufacturerId = 16,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/0/0f/Crucial_logo.svg",
                            ManufacturerName = "Crucial"
                        },
                        new
                        {
                            ManufacturerId = 17,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/3/3c/EVGA_Logo.svg",
                            ManufacturerName = "EVGA"
                        },
                        new
                        {
                            ManufacturerId = 18,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/5/5e/Cooler_Master_logo.svg",
                            ManufacturerName = "Cooler Master"
                        },
                        new
                        {
                            ManufacturerId = 19,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/3/3a/Thermaltake_logo.svg",
                            ManufacturerName = "Thermaltake"
                        },
                        new
                        {
                            ManufacturerId = 20,
                            ManufacturerLogo = "https://upload.wikimedia.org/wikipedia/commons/8/89/Razer_logo.svg",
                            ManufacturerName = "Razer"
                        });
                });

            modelBuilder.Entity("VTInformatica.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("VTInformatica.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("VTInformatica.Models.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "CPU"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Schede madri"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Name = "RAM"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Name = "Schede video"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Name = "SSD / Hard Disk"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Name = "Alimentatori"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Name = "Case"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Name = "Dissipatori"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Name = "Monitor"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Name = "Tastiere"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Name = "Mouse"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            Name = "Cuffie"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            Name = "Microfoni"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            Name = "Webcam"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            Name = "Controller"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 3,
                            Name = "Volanti"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 3,
                            Name = "Sedie da gaming"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 3,
                            Name = "Accessori RGB"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            Name = "Cavi di alimentazione"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            Name = "Adattatori e hub"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 4,
                            Name = "Ventole"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 4,
                            Name = "Paste termiche"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 5,
                            Name = "Router"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 5,
                            Name = "Schede di rete"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 5,
                            Name = "Range extender"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 6,
                            Name = "Gaming entry-level"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 6,
                            Name = "Gaming mid-range"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 6,
                            Name = "Gaming high-end"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 6,
                            Name = "Workstation"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 6,
                            Name = "Mini PC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("VTInformatica.Models.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VTInformatica.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VTInformatica.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VTInformatica.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.HasOne("VTInformatica.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VTInformatica.Models.Auth.ApplicationUserRole", b =>
                {
                    b.HasOne("VTInformatica.Models.Auth.ApplicationRole", "Role")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VTInformatica.Models.Auth.ApplicationUser", "User")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VTInformatica.Models.Cart", b =>
                {
                    b.HasOne("VTInformatica.Models.Auth.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("VTInformatica.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("VTInformatica.Models.CartItem", b =>
                {
                    b.HasOne("VTInformatica.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VTInformatica.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VTInformatica.Models.Order", b =>
                {
                    b.HasOne("VTInformatica.Models.Auth.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VTInformatica.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VTInformatica.Models.Product", b =>
                {
                    b.HasOne("VTInformatica.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VTInformatica.Models.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VTInformatica.Models.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("VTInformatica.Models.SubCategory", b =>
                {
                    b.HasOne("VTInformatica.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VTInformatica.Models.Auth.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("VTInformatica.Models.Auth.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserRoles");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("VTInformatica.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("VTInformatica.Models.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("VTInformatica.Models.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("VTInformatica.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("VTInformatica.Models.SubCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
